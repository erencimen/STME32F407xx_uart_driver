
stm32f407xx_UART_Driver_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001698  08001698  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001698  08001698  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001698  08001698  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001698  08001698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800169c  0800169c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080016a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000024  080016c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080016c4  00020468  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037c1  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c5  00000000  00000000  0002380f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  000240d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00024280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000027b2  00000000  00000000  000243e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d89  00000000  00000000  00026b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a119  00000000  00000000  0002891b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  00032ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000024 	.word	0x20000024
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001654 	.word	0x08001654

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000028 	.word	0x20000028
 80001e4:	08001654 	.word	0x08001654

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PCLK_Control>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_PCLK_Control(GPIO_TypeDef *pGPIOx,uint8_t EnorDi)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PCLK_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PCLK_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		if(pGPIOx == GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PCLK_Control+0xee>
			GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOB)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PCLK_Control+0x104>
			GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PCLK_Control+0x11a>
			GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOD)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PCLK_Control+0x130>
			GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PCLK_Control+0x146>
			GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PCLK_Control+0x15c>
			GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PCLK_Control+0x172>
			GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PCLK_Control+0x188>
			GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOI)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

	uint32_t temp =0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock

	GPIO_PCLK_Control(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff0c 	bl	80001f8 <GPIO_PCLK_Control>

	//GPIO pin mode configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d821      	bhi.n	800042c <GPIO_Init+0x64>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	4619      	mov	r1, r3
 8000406:	2303      	movs	r3, #3
 8000408:	408b      	lsls	r3, r1
 800040a:	43db      	mvns	r3, r3
 800040c:	4619      	mov	r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	400a      	ands	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//Setting
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	6819      	ldr	r1, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
		temp=0;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e0c3      	b.n	80005b4 <GPIO_Init+0x1ec>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	2b04      	cmp	r3, #4
 8000432:	d117      	bne.n	8000464 <GPIO_Init+0x9c>
		{
			//Set corresponding FTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000434:	4b47      	ldr	r3, [pc, #284]	; (8000554 <GPIO_Init+0x18c>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7912      	ldrb	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a43      	ldr	r2, [pc, #268]	; (8000554 <GPIO_Init+0x18c>)
 8000446:	430b      	orrs	r3, r1
 8000448:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b42      	ldr	r3, [pc, #264]	; (8000554 <GPIO_Init+0x18c>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	43d2      	mvns	r2, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <GPIO_Init+0x18c>)
 800045e:	400b      	ands	r3, r1
 8000460:	6093      	str	r3, [r2, #8]
 8000462:	e035      	b.n	80004d0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b05      	cmp	r3, #5
 800046a:	d117      	bne.n	800049c <GPIO_Init+0xd4>
		{
			//Set corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b39      	ldr	r3, [pc, #228]	; (8000554 <GPIO_Init+0x18c>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a35      	ldr	r2, [pc, #212]	; (8000554 <GPIO_Init+0x18c>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <GPIO_Init+0x18c>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a2f      	ldr	r2, [pc, #188]	; (8000554 <GPIO_Init+0x18c>)
 8000496:	400b      	ands	r3, r1
 8000498:	60d3      	str	r3, [r2, #12]
 800049a:	e019      	b.n	80004d0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d115      	bne.n	80004d0 <GPIO_Init+0x108>
		{
			//Set corresponding FTSR and RTSR bits
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <GPIO_Init+0x18c>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <GPIO_Init+0x18c>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b26      	ldr	r3, [pc, #152]	; (8000554 <GPIO_Init+0x18c>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a22      	ldr	r2, [pc, #136]	; (8000554 <GPIO_Init+0x18c>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
		}

		uint32_t temp1,temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	089b      	lsrs	r3, r3, #2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	613b      	str	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	60fb      	str	r3, [r7, #12]

		//Get port code for given GPIOx
		uint8_t PORTCODE =GPIO_BASE_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <GPIO_Init+0x190>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d044      	beq.n	8000578 <GPIO_Init+0x1b0>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <GPIO_Init+0x194>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d02b      	beq.n	8000550 <GPIO_Init+0x188>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a18      	ldr	r2, [pc, #96]	; (8000560 <GPIO_Init+0x198>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d024      	beq.n	800054c <GPIO_Init+0x184>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <GPIO_Init+0x19c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d01d      	beq.n	8000548 <GPIO_Init+0x180>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a15      	ldr	r2, [pc, #84]	; (8000568 <GPIO_Init+0x1a0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d016      	beq.n	8000544 <GPIO_Init+0x17c>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <GPIO_Init+0x1a4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d00f      	beq.n	8000540 <GPIO_Init+0x178>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_Init+0x1a8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d008      	beq.n	800053c <GPIO_Init+0x174>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <GPIO_Init+0x1ac>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d101      	bne.n	8000538 <GPIO_Init+0x170>
 8000534:	2307      	movs	r3, #7
 8000536:	e020      	b.n	800057a <GPIO_Init+0x1b2>
 8000538:	2300      	movs	r3, #0
 800053a:	e01e      	b.n	800057a <GPIO_Init+0x1b2>
 800053c:	2306      	movs	r3, #6
 800053e:	e01c      	b.n	800057a <GPIO_Init+0x1b2>
 8000540:	2305      	movs	r3, #5
 8000542:	e01a      	b.n	800057a <GPIO_Init+0x1b2>
 8000544:	2304      	movs	r3, #4
 8000546:	e018      	b.n	800057a <GPIO_Init+0x1b2>
 8000548:	2303      	movs	r3, #3
 800054a:	e016      	b.n	800057a <GPIO_Init+0x1b2>
 800054c:	2302      	movs	r3, #2
 800054e:	e014      	b.n	800057a <GPIO_Init+0x1b2>
 8000550:	2301      	movs	r3, #1
 8000552:	e012      	b.n	800057a <GPIO_Init+0x1b2>
 8000554:	40013c00 	.word	0x40013c00
 8000558:	40020000 	.word	0x40020000
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000
 800056c:	40021400 	.word	0x40021400
 8000570:	40021800 	.word	0x40021800
 8000574:	40022000 	.word	0x40022000
 8000578:	2300      	movs	r3, #0
 800057a:	72fb      	strb	r3, [r7, #11]

		//Enable the Clock for SYSCFG
		SYSCFG_PCLK_EN();
 800057c:	4b5f      	ldr	r3, [pc, #380]	; (80006fc <GPIO_Init+0x334>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a5e      	ldr	r2, [pc, #376]	; (80006fc <GPIO_Init+0x334>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6453      	str	r3, [r2, #68]	; 0x44

		//Set source input for the EXTIx
		SYSCFG->EXTICR[temp1] = PORTCODE << (temp2 * 4);
 8000588:	7afa      	ldrb	r2, [r7, #11]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	4a5b      	ldr	r2, [pc, #364]	; (8000700 <GPIO_Init+0x338>)
 8000594:	4619      	mov	r1, r3
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	3302      	adds	r3, #2
 800059a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <GPIO_Init+0x33c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a55      	ldr	r2, [pc, #340]	; (8000704 <GPIO_Init+0x33c>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]


	}

	//GPIO pin output speed configuration
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	799b      	ldrb	r3, [r3, #6]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2303      	movs	r3, #3
 80005d4:	408b      	lsls	r3, r1
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//Setting
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6899      	ldr	r1, [r3, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	609a      	str	r2, [r3, #8]
	temp =0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

	//GPIO pull-up pull-down configuration
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	79db      	ldrb	r3, [r3, #7]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2303      	movs	r3, #3
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		//Setting
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68d9      	ldr	r1, [r3, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	430a      	orrs	r2, r1
 8000632:	60da      	str	r2, [r3, #12]
	temp =0;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]

	//GPIO output type configuration
	//Output Type Mode register set only when GPIO Mode is out
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11f      	bne.n	8000680 <GPIO_Init+0x2b8>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	4619      	mov	r1, r3
 800065c:	2301      	movs	r3, #1
 800065e:	408b      	lsls	r3, r1
 8000660:	43db      	mvns	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	400a      	ands	r2, r1
 800066a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;	//Setting
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6859      	ldr	r1, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	430a      	orrs	r2, r1
 800067a:	605a      	str	r2, [r3, #4]
		temp =0;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
	}

	//GPIO alternate function mode configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d134      	bne.n	80006f2 <GPIO_Init+0x32a>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	72bb      	strb	r3, [r7, #10]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	727b      	strb	r3, [r7, #9]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7a5b      	ldrb	r3, [r3, #9]
 800069e:	461a      	mov	r2, r3
 80006a0:	7a7b      	ldrb	r3, [r7, #9]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF) << 4*temp2);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	7aba      	ldrb	r2, [r7, #10]
 80006b0:	3208      	adds	r2, #8
 80006b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b6:	7a7b      	ldrb	r3, [r7, #9]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	220f      	movs	r2, #15
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7aba      	ldrb	r2, [r7, #10]
 80006ca:	4001      	ands	r1, r0
 80006cc:	3208      	adds	r2, #8
 80006ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7aba      	ldrb	r2, [r7, #10]
 80006d8:	3208      	adds	r2, #8
 80006da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7aba      	ldrb	r2, [r7, #10]
 80006e4:	6979      	ldr	r1, [r7, #20]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp =0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
	}

}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40013800 	.word	0x40013800
 8000704:	40013c00 	.word	0x40013c00

08000708 <GPIO_IRQITConfig>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d133      	bne.n	8000786 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b1f      	cmp	r3, #31
 8000722:	d80a      	bhi.n	800073a <GPIO_IRQITConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <GPIO_IRQITConfig+0xf0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <GPIO_IRQITConfig+0xf0>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
		else if(IRQNumber>63 && IRQNumber <96)
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000738:	e059      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b1f      	cmp	r3, #31
 800073e:	d90f      	bls.n	8000760 <GPIO_IRQITConfig+0x58>
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b3f      	cmp	r3, #63	; 0x3f
 8000744:	d80c      	bhi.n	8000760 <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <GPIO_IRQITConfig+0xf4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	f002 021f 	and.w	r2, r2, #31
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a28      	ldr	r2, [pc, #160]	; (80007fc <GPIO_IRQITConfig+0xf4>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e046      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b3f      	cmp	r3, #63	; 0x3f
 8000764:	d943      	bls.n	80007ee <GPIO_IRQITConfig+0xe6>
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b5f      	cmp	r3, #95	; 0x5f
 800076a:	d840      	bhi.n	80007ee <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <GPIO_IRQITConfig+0xf8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <GPIO_IRQITConfig+0xf8>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	e033      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d80a      	bhi.n	80007a2 <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <GPIO_IRQITConfig+0xfc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <GPIO_IRQITConfig+0xfc>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	e025      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d90f      	bls.n	80007c8 <GPIO_IRQITConfig+0xc0>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b3f      	cmp	r3, #63	; 0x3f
 80007ac:	d80c      	bhi.n	80007c8 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <GPIO_IRQITConfig+0x100>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	f002 021f 	and.w	r2, r2, #31
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <GPIO_IRQITConfig+0x100>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e012      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b3f      	cmp	r3, #63	; 0x3f
 80007cc:	d90f      	bls.n	80007ee <GPIO_IRQITConfig+0xe6>
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b5f      	cmp	r3, #95	; 0x5f
 80007d2:	d80c      	bhi.n	80007ee <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <GPIO_IRQITConfig+0x104>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <GPIO_IRQITConfig+0x104>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e7ff      	b.n	80007ee <GPIO_IRQITConfig+0xe6>
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000e104 	.word	0xe000e104
 8000800:	e000e108 	.word	0xe000e108
 8000804:	e000e180 	.word	0xe000e180
 8000808:	e000e184 	.word	0xe000e184
 800080c:	e000e188 	.word	0xe000e188

08000810 <GPIO_IRQ_Handling>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_IRQ_Handling(uint8_t GPIO_PinNumber)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	//Clear the EXTI PR Register corresponding to the pin number
	if(EXTI->PR & (1 << GPIO_PinNumber))
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <GPIO_IRQ_Handling+0x3c>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4013      	ands	r3, r2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d009      	beq.n	8000840 <GPIO_IRQ_Handling+0x30>
	{
		EXTI->PR |= (1 << GPIO_PinNumber); //This bit is cleared by programming it to ‘1’
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <GPIO_IRQ_Handling+0x3c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <GPIO_IRQ_Handling+0x3c>)
 800083c:	430b      	orrs	r3, r1
 800083e:	6153      	str	r3, [r2, #20]
	}
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40013c00 	.word	0x40013c00

08000850 <RCC_GetPCLK1Value>:
 * @return			- APB1 bus clock
 *
 * @Note			- None
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
	uint8_t SCLK_Source, temp, ahbp, apb1;
	uint32_t System_Clk;


	SCLK_Source = ((RCC->CFGR >> RCC_CFGR_SW) & 0x3);
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <RCC_GetPCLK1Value+0x9c>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	71fb      	strb	r3, [r7, #7]

	if(SCLK_Source == 0)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <RCC_GetPCLK1Value+0x1e>
	{
		System_Clk	= RCC_HSI;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <RCC_GetPCLK1Value+0xa0>)
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	e00b      	b.n	8000886 <RCC_GetPCLK1Value+0x36>

	}
	else if(SCLK_Source == 1)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d102      	bne.n	800087a <RCC_GetPCLK1Value+0x2a>
	{
		System_Clk = RCC_HSE;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <RCC_GetPCLK1Value+0xa4>)
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	e005      	b.n	8000886 <RCC_GetPCLK1Value+0x36>

	}

	else if(SCLK_Source == 2)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d102      	bne.n	8000886 <RCC_GetPCLK1Value+0x36>
	{
		System_Clk = RCC_GetPLLOutputClock();
 8000880:	f000 f896 	bl	80009b0 <RCC_GetPLLOutputClock>
 8000884:	60b8      	str	r0, [r7, #8]
	}

	temp = (RCC->CFGR >> RCC_CFGR_HPRE) & 0xF;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <RCC_GetPCLK1Value+0x9c>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	71bb      	strb	r3, [r7, #6]
	if(temp < 8)
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	2b07      	cmp	r3, #7
 8000898:	d802      	bhi.n	80008a0 <RCC_GetPCLK1Value+0x50>
	{
		ahbp = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e005      	b.n	80008ac <RCC_GetPCLK1Value+0x5c>
	}
	else
	{
		ahbp = AHB_Prescaler[temp - 8];
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	3b08      	subs	r3, #8
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <RCC_GetPCLK1Value+0xa8>)
 80008a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008aa:	73fb      	strb	r3, [r7, #15]
	}

	temp = (RCC->CFGR >> RCC_CFGR_PPRE1) & 0x4;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <RCC_GetPCLK1Value+0x9c>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	0a9b      	lsrs	r3, r3, #10
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	71bb      	strb	r3, [r7, #6]
	if(temp < 4)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d802      	bhi.n	80008c6 <RCC_GetPCLK1Value+0x76>
	{
		apb1 = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73bb      	strb	r3, [r7, #14]
 80008c4:	e004      	b.n	80008d0 <RCC_GetPCLK1Value+0x80>
	}
	else
	{
		apb1 = APB1_Prescaler[temp - 4];
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	3b04      	subs	r3, #4
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <RCC_GetPCLK1Value+0xac>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	73bb      	strb	r3, [r7, #14]
	}

	System_Clk = (System_Clk/ahbp)/apb1;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	60bb      	str	r3, [r7, #8]

	return System_Clk;
 80008e0:	68bb      	ldr	r3, [r7, #8]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	00f42400 	.word	0x00f42400
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000010 	.word	0x20000010

08000900 <RCC_GetPCLK2Value>:
 * @return			- APB2 bus clock
 *
 * @Note			- None
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
	uint8_t SCLK_Source, temp, ahbp, apb2;
	uint32_t System_Clk;


	SCLK_Source = ((RCC->CFGR >> RCC_CFGR_SW) & 0x3);
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <RCC_GetPCLK2Value+0x9c>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	71fb      	strb	r3, [r7, #7]

	if(SCLK_Source == 0)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <RCC_GetPCLK2Value+0x1e>
	{
		System_Clk	= RCC_HSI;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <RCC_GetPCLK2Value+0xa0>)
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e00b      	b.n	8000936 <RCC_GetPCLK2Value+0x36>

	}
	else if(SCLK_Source == 1)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d102      	bne.n	800092a <RCC_GetPCLK2Value+0x2a>
	{
		System_Clk = RCC_HSE;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <RCC_GetPCLK2Value+0xa4>)
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	e005      	b.n	8000936 <RCC_GetPCLK2Value+0x36>

	}

	else if(SCLK_Source == 2)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d102      	bne.n	8000936 <RCC_GetPCLK2Value+0x36>
	{
		System_Clk = RCC_GetPLLOutputClock();
 8000930:	f000 f83e 	bl	80009b0 <RCC_GetPLLOutputClock>
 8000934:	60b8      	str	r0, [r7, #8]
	}

	temp = (RCC->CFGR >> RCC_CFGR_HPRE) & 0xF;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <RCC_GetPCLK2Value+0x9c>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	71bb      	strb	r3, [r7, #6]
	if(temp < 8)
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b07      	cmp	r3, #7
 8000948:	d802      	bhi.n	8000950 <RCC_GetPCLK2Value+0x50>
	{
		ahbp = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e005      	b.n	800095c <RCC_GetPCLK2Value+0x5c>
	}
	else
	{
		ahbp = AHB_Prescaler[temp - 8];
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	3b08      	subs	r3, #8
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <RCC_GetPCLK2Value+0xa8>)
 8000956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095a:	73fb      	strb	r3, [r7, #15]
	}

	temp = (RCC->CFGR >> RCC_CFGR_PPRE2) & 0x4;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <RCC_GetPCLK2Value+0x9c>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	0b5b      	lsrs	r3, r3, #13
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	71bb      	strb	r3, [r7, #6]
	if(temp < 4)
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d802      	bhi.n	8000976 <RCC_GetPCLK2Value+0x76>
	{
		apb2 = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]
 8000974:	e004      	b.n	8000980 <RCC_GetPCLK2Value+0x80>
	}
	else
	{
		apb2 = APB2_Prescaler[temp - 4];
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	3b04      	subs	r3, #4
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <RCC_GetPCLK2Value+0xac>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	73bb      	strb	r3, [r7, #14]
	}

	System_Clk = (System_Clk/ahbp)/apb2;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	fbb2 f2f3 	udiv	r2, r2, r3
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	60bb      	str	r3, [r7, #8]

	return System_Clk;
 8000990:	68bb      	ldr	r3, [r7, #8]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	00f42400 	.word	0x00f42400
 80009a4:	007a1200 	.word	0x007a1200
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000014 	.word	0x20000014

080009b0 <RCC_GetPLLOutputClock>:
 * @return			- APB1 bus clock
 *
 * @Note			- None
 */
uint32_t RCC_GetPLLOutputClock(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
	uint32_t PLL_Src,System_Clk;

	if(((RCC->PLLCFGR >> RCC_PLLCFGR_PLLSRC) & 0x1))
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <RCC_GetPLLOutputClock+0x60>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	0d9b      	lsrs	r3, r3, #22
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <RCC_GetPLLOutputClock+0x1a>
	{
		PLL_Src = RCC_HSE;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <RCC_GetPLLOutputClock+0x64>)
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	e001      	b.n	80009ce <RCC_GetPLLOutputClock+0x1e>
	}
	else
	{
		PLL_Src = RCC_HSI;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <RCC_GetPLLOutputClock+0x68>)
 80009cc:	607b      	str	r3, [r7, #4]
	}

	System_Clk = PLL_Src / ((RCC->PLLCFGR >> RCC_PLLCFGR_PLLM) & 0x1F);
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <RCC_GetPLLOutputClock+0x60>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 031f 	and.w	r3, r3, #31
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	603b      	str	r3, [r7, #0]

	System_Clk = System_Clk * ((RCC->PLLCFGR >> RCC_PLLCFGR_PLLN) & 0x1FF);
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <RCC_GetPLLOutputClock+0x60>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	099b      	lsrs	r3, r3, #6
 80009e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	603b      	str	r3, [r7, #0]

	System_Clk = System_Clk / ((RCC->PLLCFGR >> RCC_PLLCFGR_PLLP) & 0x3);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <RCC_GetPLLOutputClock+0x60>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	0c1b      	lsrs	r3, r3, #16
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a00:	603b      	str	r3, [r7, #0]

	return System_Clk;
 8000a02:	683b      	ldr	r3, [r7, #0]

}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	007a1200 	.word	0x007a1200
 8000a18:	00f42400 	.word	0x00f42400

08000a1c <UART_PCLK_Control>:
 * @return			- None
 *
 * @Note			- None
 */
void UART_PCLK_Control(USART_TypeDef *pUSARTx,uint8_t EnorDi)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d141      	bne.n	8000ab2 <UART_PCLK_Control+0x96>
	{
		if(pUSARTx == USART1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <UART_PCLK_Control+0x124>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <UART_PCLK_Control+0x28>
		{
			USART1_PCLK_EN();
 8000a36:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a42      	ldr	r2, [pc, #264]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_EN();
		}
	}
}
 8000a42:	e077      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a40      	ldr	r2, [pc, #256]	; (8000b48 <UART_PCLK_Control+0x12c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <UART_PCLK_Control+0x3e>
			USART2_PCLK_EN();
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a58:	e06c      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART3)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <UART_PCLK_Control+0x130>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <UART_PCLK_Control+0x54>
			USART3_PCLK_EN();
 8000a62:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a37      	ldr	r2, [pc, #220]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a6e:	e061      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == UART4)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a37      	ldr	r2, [pc, #220]	; (8000b50 <UART_PCLK_Control+0x134>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <UART_PCLK_Control+0x6a>
			UART4_PCLK_EN();
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a84:	e056      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == UART5)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a32      	ldr	r2, [pc, #200]	; (8000b54 <UART_PCLK_Control+0x138>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <UART_PCLK_Control+0x80>
			UART5_PCLK_EN();
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a9a:	e04b      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART6)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <UART_PCLK_Control+0x13c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d147      	bne.n	8000b34 <UART_PCLK_Control+0x118>
			USART6_PCLK_EN();
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ab0:	e040      	b.n	8000b34 <UART_PCLK_Control+0x118>
		if(pUSARTx == USART1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <UART_PCLK_Control+0x124>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <UART_PCLK_Control+0xac>
			USART1_PCLK_DI();
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000ac0:	f023 0310 	bic.w	r3, r3, #16
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ac6:	e035      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <UART_PCLK_Control+0x12c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <UART_PCLK_Control+0xc2>
			USART2_PCLK_DI();
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000ad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000adc:	e02a      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART3)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <UART_PCLK_Control+0x130>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <UART_PCLK_Control+0xd8>
			USART3_PCLK_DI();
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af2:	e01f      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == UART4)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <UART_PCLK_Control+0x134>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d106      	bne.n	8000b0a <UART_PCLK_Control+0xee>
			UART4_PCLK_DI();
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000b02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b08:	e014      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == UART5)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <UART_PCLK_Control+0x138>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d106      	bne.n	8000b20 <UART_PCLK_Control+0x104>
			UART5_PCLK_DI();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000b18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1e:	e009      	b.n	8000b34 <UART_PCLK_Control+0x118>
		else if(pUSARTx == USART6)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <UART_PCLK_Control+0x13c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d105      	bne.n	8000b34 <UART_PCLK_Control+0x118>
			USART6_PCLK_EN();
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <UART_PCLK_Control+0x128>)
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40004c00 	.word	0x40004c00
 8000b54:	40005000 	.word	0x40005000
 8000b58:	40011400 	.word	0x40011400

08000b5c <UART_Init>:
 * @return			- None
 *
 * @Note			- None
 */
void UART_Init(USART_Handle_t *pUARTHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	UART_PCLK_Control(pUARTHandle->pUSARTx, ENABLE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff56 	bl	8000a1c <UART_PCLK_Control>
	uint32_t temp = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]

	//UART mode configuration
	if(pUARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d108      	bne.n	8000b8e <UART_Init+0x32>
	{
		temp |= (0x1 << USART_CR1_RE);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
		temp &= ~(0x1 << USART_CR1_TE);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f023 0308 	bic.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e018      	b.n	8000bc0 <UART_Init+0x64>
	}
	else if(pUARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	791b      	ldrb	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <UART_Init+0x4c>
	{
		temp |= (0x1 << USART_CR1_TE);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
		temp &= ~(0x1 << USART_CR1_RE);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f023 0304 	bic.w	r3, r3, #4
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e00b      	b.n	8000bc0 <UART_Init+0x64>
	}
	else if(pUARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d107      	bne.n	8000bc0 <UART_Init+0x64>
	{
		temp |= (0x1 << USART_CR1_RE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
		temp |= (0x1 << USART_CR1_TE);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	60fb      	str	r3, [r7, #12]
	}

	//UART parity control configuration
	if(pUARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b9b      	ldrb	r3, [r3, #14]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <UART_Init+0x76>
	{
		temp &= ~(0x1 << USART_CR1_PCE);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e018      	b.n	8000c04 <UART_Init+0xa8>
	}
	else if(pUARTHandle->USART_Config.USART_ParityControl == USART_EVEN_PARITY)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7b9b      	ldrb	r3, [r3, #14]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d108      	bne.n	8000bec <UART_Init+0x90>
	{
		temp |= (0x1 << USART_CR1_PCE);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be0:	60fb      	str	r3, [r7, #12]
		temp &= ~(0x1 << USART_CR1_PS);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e00b      	b.n	8000c04 <UART_Init+0xa8>
	}
	else if(pUARTHandle->USART_Config.USART_ParityControl == USART_ODD_PARITY)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7b9b      	ldrb	r3, [r3, #14]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d107      	bne.n	8000c04 <UART_Init+0xa8>
	{
		temp |= (0x1 << USART_CR1_PCE);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	60fb      	str	r3, [r7, #12]
		temp |= (0x1 << USART_CR1_PS);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	60fb      	str	r3, [r7, #12]
	}

	//UART word length configuration
	if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_8)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b5b      	ldrb	r3, [r3, #13]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <UART_Init+0xba>
	{
		temp &= ~(0x1 << USART_CR1_M);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e007      	b.n	8000c26 <UART_Init+0xca>
	}
	else if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_9)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7b5b      	ldrb	r3, [r3, #13]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d103      	bne.n	8000c26 <UART_Init+0xca>
	{
		temp |= (0x1 << USART_CR1_M);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	60fb      	str	r3, [r7, #12]
	}

	pUARTHandle->pUSARTx->USART_CR1 = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	60da      	str	r2, [r3, #12]

	temp =0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
	//UART stop bit configuration
	temp |= pUARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7b1b      	ldrb	r3, [r3, #12]
 8000c36:	031b      	lsls	r3, r3, #12
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
	pUARTHandle->pUSARTx->USART_CR2 = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	611a      	str	r2, [r3, #16]

	temp=0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]

	//USART hardware flow control configuration
	if ( pUARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7bdb      	ldrb	r3, [r3, #15]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <UART_Init+0x102>
	{
		temp |= ( 1 << USART_CR3_CTSE);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e014      	b.n	8000c88 <UART_Init+0x12c>
	}
	else if (pUARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7bdb      	ldrb	r3, [r3, #15]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d104      	bne.n	8000c70 <UART_Init+0x114>
	{
		temp |= ( 1 << USART_CR3_RTSE);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e00b      	b.n	8000c88 <UART_Init+0x12c>
	}
	else if (pUARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7bdb      	ldrb	r3, [r3, #15]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d107      	bne.n	8000c88 <UART_Init+0x12c>
	{
		temp |= ( 1 << USART_CR3_CTSE);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	60fb      	str	r3, [r7, #12]
		temp |= ( 1 << USART_CR3_RTSE);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	60fb      	str	r3, [r7, #12]
	}

	pUARTHandle->pUSARTx->USART_CR3 = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	615a      	str	r2, [r3, #20]

	USART_SetBaudRate(pUARTHandle->pUSARTx, pUARTHandle->USART_Config.USART_Baud);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f000 fb06 	bl	80012ac <USART_SetBaudRate>

}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <USART_SendData>:
 * @return			- None
 *
 * @Note			- This is Blocking Call
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	   //Loop over until "Len" number of bytes are transferred
		for(uint32_t i = 0 ; i < Len; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e031      	b.n	8000d1e <USART_SendData+0x76>
		{
			while(! UART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000cba:	bf00      	nop
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fade 	bl	8001284 <UART_GetFlagStatus>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f6      	beq.n	8000cbc <USART_SendData+0x14>

	         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_9)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	7b5b      	ldrb	r3, [r3, #13]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d118      	bne.n	8000d08 <USART_SendData+0x60>
			{
				pdata = (uint16_t*) pTxBuffer;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
				pUSARTHandle->pUSARTx->USAERT_DR = (*pdata & (uint16_t)0x01FF);
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ce8:	605a      	str	r2, [r3, #4]

				//check for USART_ParityControl
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	7b9b      	ldrb	r3, [r3, #14]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d106      	bne.n	8000d00 <USART_SendData+0x58>
				{
					//No parity is used in this transfer. so, 9bits of user data will be sent
					pTxBuffer++;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
					pTxBuffer++;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e00b      	b.n	8000d18 <USART_SendData+0x70>
				}
				else
				{
					//Parity bit is used in this transfer . so , 8bits of user data will be sent
					//The 9th bit will be replaced by parity bit by the hardware
					pTxBuffer++;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	e007      	b.n	8000d18 <USART_SendData+0x70>
				}
			}
			else
			{
				pUSARTHandle->pUSARTx->USAERT_DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]

				pTxBuffer++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = 0 ; i < Len; i++)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3c9      	bcc.n	8000cba <USART_SendData+0x12>
			}
		}
		//Wait until TC flag is set in SR
		while( ! UART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 faa8 	bl	8001284 <UART_GetFlagStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f6      	beq.n	8000d28 <USART_SendData+0x80>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <USART_ReceiveDataIT>:
 * @return			- State
 *
 * @Note			- This is Blocking Call
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b087      	sub	sp, #28
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d54:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d014      	beq.n	8000d86 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->USAERT_DR;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]

		pUSARTHandle->pUSARTx->USART_CR1 |= (0x1 << USART_CR1_RXNEIE);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0220 	orr.w	r2, r2, #32
 8000d84:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <UART_IRQITConfig>:
 * @return			- None
 *
 * @Note			- None
 */
void UART_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d133      	bne.n	8000e12 <UART_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b1f      	cmp	r3, #31
 8000dae:	d80a      	bhi.n	8000dc6 <UART_IRQITConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <UART_IRQITConfig+0xf0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <UART_IRQITConfig+0xf0>)
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	6013      	str	r3, [r2, #0]
		else if(IRQNumber>63 && IRQNumber <96)
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000dc4:	e059      	b.n	8000e7a <UART_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	d90f      	bls.n	8000dec <UART_IRQITConfig+0x58>
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd0:	d80c      	bhi.n	8000dec <UART_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <UART_IRQITConfig+0xf4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	f002 021f 	and.w	r2, r2, #31
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <UART_IRQITConfig+0xf4>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e046      	b.n	8000e7a <UART_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b3f      	cmp	r3, #63	; 0x3f
 8000df0:	d943      	bls.n	8000e7a <UART_IRQITConfig+0xe6>
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b5f      	cmp	r3, #95	; 0x5f
 8000df6:	d840      	bhi.n	8000e7a <UART_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <UART_IRQITConfig+0xf8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <UART_IRQITConfig+0xf8>)
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	e033      	b.n	8000e7a <UART_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b1f      	cmp	r3, #31
 8000e16:	d80a      	bhi.n	8000e2e <UART_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <UART_IRQITConfig+0xfc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <UART_IRQITConfig+0xfc>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	e025      	b.n	8000e7a <UART_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	d90f      	bls.n	8000e54 <UART_IRQITConfig+0xc0>
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b3f      	cmp	r3, #63	; 0x3f
 8000e38:	d80c      	bhi.n	8000e54 <UART_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <UART_IRQITConfig+0x100>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	f002 021f 	and.w	r2, r2, #31
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <UART_IRQITConfig+0x100>)
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e012      	b.n	8000e7a <UART_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b3f      	cmp	r3, #63	; 0x3f
 8000e58:	d90f      	bls.n	8000e7a <UART_IRQITConfig+0xe6>
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e5e:	d80c      	bhi.n	8000e7a <UART_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <UART_IRQITConfig+0x104>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	4611      	mov	r1, r2
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <UART_IRQITConfig+0x104>)
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	e7ff      	b.n	8000e7a <UART_IRQITConfig+0xe6>
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000e104 	.word	0xe000e104
 8000e8c:	e000e108 	.word	0xe000e108
 8000e90:	e000e180 	.word	0xe000e180
 8000e94:	e000e184 	.word	0xe000e184
 8000e98:	e000e188 	.word	0xe000e188

08000e9c <UART_IRQ_Handling>:
 * @return			- None
 *
 * @Note			- None
 */
void UART_IRQ_Handling(USART_Handle_t *pUARTHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2,temp3;

	uint16_t *pData;
	temp1=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
	temp3=0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
	/*
	 * Transmission Complete Event Handler
	 */

	//Chcek for TC Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0x1 << USART_SR_TC));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eba:	617b      	str	r3, [r7, #20]

	//TCIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR1 & (0x1 << USART_CR1_TCIE));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d021      	beq.n	8000f12 <UART_IRQ_Handling+0x76>
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d01e      	beq.n	8000f12 <UART_IRQ_Handling+0x76>
	{
		//Close Transmission
		if(pUARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d119      	bne.n	8000f12 <UART_IRQ_Handling+0x76>
		{
			if(pUARTHandle->TxLen == 0)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d115      	bne.n	8000f12 <UART_IRQ_Handling+0x76>
			{
				//Clear TC Flag
				pUARTHandle->pUSARTx->USART_SR &= ~(0x1 << USART_SR_TC);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ef4:	601a      	str	r2, [r3, #0]

				//Reset the App State
				pUARTHandle->TxBusyState = USART_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]

				//Rest the Buffer to Null
				pUARTHandle->pTxBuffer = NULL;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]

				//Reset the Length
				pUARTHandle->TxLen =0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]

				//Call App Callback
				USART_ApplicationEventCallback(pUARTHandle, USART_EVENT_TX_CMPLT);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 fb37 	bl	8001580 <USART_ApplicationEventCallback>
			}
		}
	}


	temp1=0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
	temp3=0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	/*
	 * Transmit Data Register Empty Event Handler
	 */

	//Check for TXE Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0x1 << USART_SR_TXE));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f28:	617b      	str	r3, [r7, #20]

	//TXEIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR1 & (0x1 << USART_CR1_TXEIE));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f34:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d059      	beq.n	8000ff0 <UART_IRQ_Handling+0x154>
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d056      	beq.n	8000ff0 <UART_IRQ_Handling+0x154>
	{
		if(pUARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d151      	bne.n	8000ff0 <UART_IRQ_Handling+0x154>
		{
			//Send data until TxLen Equal to 0
			if(pUARTHandle->TxLen > 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d041      	beq.n	8000fd8 <UART_IRQ_Handling+0x13c>
			{
				//Check for USART_WordLength 9 Bits or 8 Bits
				if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_9)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7b5b      	ldrb	r3, [r3, #13]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d129      	bne.n	8000fb0 <UART_IRQ_Handling+0x114>
				{
					pData = (uint16_t *)pUARTHandle->pTxBuffer;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	60bb      	str	r3, [r7, #8]

					pUARTHandle->pUSARTx->USAERT_DR = (*pData & (uint16_t)0x01FF);
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f70:	605a      	str	r2, [r3, #4]

					//Check for parity
					if(pUARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7b9b      	ldrb	r3, [r3, #14]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <UART_IRQ_Handling+0xfe>
					{
						//9 Bit Data Transfered
						pUARTHandle->TxLen -=2;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	1e9a      	subs	r2, r3, #2
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
						pUARTHandle->pTxBuffer++;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
						pUARTHandle->pTxBuffer++;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	e01e      	b.n	8000fd8 <UART_IRQ_Handling+0x13c>
					}
					else
					{
						//8 bit Data Transfered
						pUARTHandle->pTxBuffer++;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	611a      	str	r2, [r3, #16]
						pUARTHandle->TxLen --;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	1e5a      	subs	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
 8000fae:	e013      	b.n	8000fd8 <UART_IRQ_Handling+0x13c>
					}
				}
				else if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_8)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7b5b      	ldrb	r3, [r3, #13]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10f      	bne.n	8000fd8 <UART_IRQ_Handling+0x13c>
				{
					pUARTHandle->pUSARTx->USAERT_DR = (*pUARTHandle->pTxBuffer & (uint8_t)0XFF);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

					pUARTHandle->pTxBuffer++;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]
					pUARTHandle->TxLen--;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]

				}
			}
			if(pUARTHandle->TxLen == 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d107      	bne.n	8000ff0 <UART_IRQ_Handling+0x154>
			{
				pUARTHandle->pUSARTx->USART_CR1 &= ~(0x1 << USART_CR1_TXEIE);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fee:	60da      	str	r2, [r3, #12]
			}
		}
	}

	temp1=0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
	temp3=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
	/*
	 * Received Data Ready to be Read Event Handler
	 */

	//Check For RXNE Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0X1 << USART_SR_RXNE));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	617b      	str	r3, [r7, #20]

	//RXENIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR1 & (0x1 << USART_CR1_RXNEIE));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d07c      	beq.n	8001114 <UART_IRQ_Handling+0x278>
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d079      	beq.n	8001114 <UART_IRQ_Handling+0x278>
	{
		if(pUARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001026:	2b01      	cmp	r3, #1
 8001028:	d174      	bne.n	8001114 <UART_IRQ_Handling+0x278>
		{
			if(pUARTHandle->RxLen > 0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d05c      	beq.n	80010ec <UART_IRQ_Handling+0x250>
			{
				if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_9)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7b5b      	ldrb	r3, [r3, #13]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d12a      	bne.n	8001090 <UART_IRQ_Handling+0x1f4>
				{
					if(pUARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7b9b      	ldrb	r3, [r3, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d114      	bne.n	800106c <UART_IRQ_Handling+0x1d0>
					{
						//9 Bit User Data Received
						*((uint16_t *)pUARTHandle->pRxBuffer) = (pUARTHandle->pUSARTx->USAERT_DR & (uint16_t)0x01FF);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001052:	b292      	uxth	r2, r2
 8001054:	801a      	strh	r2, [r3, #0]

						pUARTHandle->pRxBuffer +=2;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	1c9a      	adds	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	615a      	str	r2, [r3, #20]
						pUARTHandle->RxLen-=2;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	1e9a      	subs	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	61da      	str	r2, [r3, #28]
 800106a:	e03f      	b.n	80010ec <UART_IRQ_Handling+0x250>
					}
					else
					{
						//8 Bit User Data Received
						*(pUARTHandle->pRxBuffer) = (pUARTHandle->pUSARTx->USAERT_DR & (uint8_t)0xFF);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

						pUARTHandle->pRxBuffer++;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]
						pUARTHandle->RxLen--;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	61da      	str	r2, [r3, #28]
 800108e:	e02d      	b.n	80010ec <UART_IRQ_Handling+0x250>
					}
				}
				else if(pUARTHandle->USART_Config.USART_WordLength == USART_WORD_LEN_8)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7b5b      	ldrb	r3, [r3, #13]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d129      	bne.n	80010ec <UART_IRQ_Handling+0x250>
				{
					if(pUARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7b9b      	ldrb	r3, [r3, #14]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d111      	bne.n	80010c4 <UART_IRQ_Handling+0x228>
					{
						//8 Bit User Data Received
						*(pUARTHandle->pRxBuffer) = (pUARTHandle->pUSARTx->USAERT_DR & (uint8_t)0xFF);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]

						pUARTHandle->RxLen--;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	61da      	str	r2, [r3, #28]
						pUARTHandle->pRxBuffer++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	e013      	b.n	80010ec <UART_IRQ_Handling+0x250>
					}
					else
					{
						*(pUARTHandle->pRxBuffer) = (pUARTHandle->pUSARTx->USAERT_DR & (uint8_t)0x7F);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]

						pUARTHandle->pRxBuffer++;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	615a      	str	r2, [r3, #20]
						pUARTHandle->RxLen--;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	61da      	str	r2, [r3, #28]
					}
				}
			}
			if(pUARTHandle->RxLen ==0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10f      	bne.n	8001114 <UART_IRQ_Handling+0x278>
			{
				pUARTHandle->pUSARTx->USART_CR1 &= ~(0x1 << USART_CR1_RXNEIE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0220 	bic.w	r2, r2, #32
 8001102:	60da      	str	r2, [r3, #12]
				pUARTHandle->RxBusyState = USART_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUARTHandle, USART_EVENT_RX_CMPLT);
 800110c:	2101      	movs	r1, #1
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fa36 	bl	8001580 <USART_ApplicationEventCallback>
			}
		}
	}

	temp1=0;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
	temp2=0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
	temp3=0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
	/*
	 * CTS flag Event Hanlder
	 */

	//Check for CTS Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0x1 << USART_SR_CTS));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112a:	617b      	str	r3, [r7, #20]

	//CTSIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR3 & (0x1 << USART_CR3_CTSIE));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	613b      	str	r3, [r7, #16]

	//CTSE Enable Bit Control
	temp3 = (pUARTHandle->pUSARTx->USART_CR3 & (0x1 << USART_CR3_CTSE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001142:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp2 && temp3)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d011      	beq.n	800116e <UART_IRQ_Handling+0x2d2>
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <UART_IRQ_Handling+0x2d2>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <UART_IRQ_Handling+0x2d2>
	{
		pUARTHandle->pUSARTx->USART_SR &= ~(0x1 << USART_SR_CTS);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001164:	601a      	str	r2, [r3, #0]

		USART_ApplicationEventCallback(pUARTHandle, USART_EVENT_CTS);
 8001166:	2103      	movs	r1, #3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fa09 	bl	8001580 <USART_ApplicationEventCallback>
	}

	temp1=0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	temp2=0;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
	temp3=0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
	/*
	 * Idle Line Detected Event Handler
	 */

	//Check for IDLE Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0x1 << USART_SR_IDLE));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	617b      	str	r3, [r7, #20]

	//IDLEIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR1 & (0x1 << USART_CR1_IDLEIE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <UART_IRQ_Handling+0x31a>
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <UART_IRQ_Handling+0x31a>
	{
		pUARTHandle->pUSARTx->USART_SR &= ~(0x1 << USART_SR_IDLE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0210 	bic.w	r2, r2, #16
 80011ac:	601a      	str	r2, [r3, #0]

		USART_ApplicationEventCallback(pUARTHandle, USART_EVENT_IDLE);
 80011ae:	2102      	movs	r1, #2
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f9e5 	bl	8001580 <USART_ApplicationEventCallback>
	}

	temp1=0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
	temp2=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
	temp3=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
	/*
	 * Overrun Error Detected Event Handler
	 */

	//Check for ORE Flag
	temp1 = (pUARTHandle->pUSARTx->USART_SR & (0x1 << USART_SR_ORE));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	617b      	str	r3, [r7, #20]

	//RXNEIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR1 & (0x1 << USART_CR1_RXNEIE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <UART_IRQ_Handling+0x352>
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <UART_IRQ_Handling+0x352>
	{
		//Do Not Need to Clear ORE

		USART_ApplicationEventCallback(pUARTHandle, USART_ERR_ORE);
 80011e6:	2107      	movs	r1, #7
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f9c9 	bl	8001580 <USART_ApplicationEventCallback>
	}

	/***************************************************************************************************************/

	temp1=0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
	temp2=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
	temp3=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
	/*
	 * Noise Flag, Overrun error and Framing Error in multibuffer communication Event Handler
	 */

	//EIE Enable Bit Control
	temp2 = (pUARTHandle->pUSARTx->USART_CR3 & (0x1 << USART_CR3_EIE));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	613b      	str	r3, [r7, #16]

	if(temp2)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01c      	beq.n	8001246 <UART_IRQ_Handling+0x3aa>
	{
		if(temp1 & (0x1 << USART_SR_FE))
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <UART_IRQ_Handling+0x384>
		{
			USART_ApplicationEventCallback(pUARTHandle, USART_ERR_FE);
 8001216:	2105      	movs	r1, #5
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f9b1 	bl	8001580 <USART_ApplicationEventCallback>
			USART_ApplicationEventCallback(pUARTHandle, USART_ERR_NE);
		}
	}


}
 800121e:	e012      	b.n	8001246 <UART_IRQ_Handling+0x3aa>
		else if(temp1 & (0x1 << USART_SR_ORE))
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <UART_IRQ_Handling+0x398>
			USART_ApplicationEventCallback(pUARTHandle, USART_ERR_ORE);
 800122a:	2107      	movs	r1, #7
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9a7 	bl	8001580 <USART_ApplicationEventCallback>
}
 8001232:	e008      	b.n	8001246 <UART_IRQ_Handling+0x3aa>
		else if(temp1 & (0x1 << USART_SR_NF))
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <UART_IRQ_Handling+0x3aa>
			USART_ApplicationEventCallback(pUARTHandle, USART_ERR_NE);
 800123e:	2106      	movs	r1, #6
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f99d 	bl	8001580 <USART_ApplicationEventCallback>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <UART_PeripheralControl>:
 * @return			- None
 *
 * @Note			- None
 */
void UART_PeripheralControl(USART_TypeDef *pUSARTx,uint8_t EnorDi)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <UART_PeripheralControl+0x20>
	{
		pUSARTx->USART_CR1 |= (0x1 << USART_CR1_UE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->USART_CR1 &= ~(0x1 << USART_CR1_UE);
	}
}
 800126c:	e005      	b.n	800127a <UART_PeripheralControl+0x2c>
		pUSARTx->USART_CR1 &= ~(0x1 << USART_CR1_UE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60da      	str	r2, [r3, #12]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <UART_GetFlagStatus>:
 *
 * @Note			- None
 */

uint8_t UART_GetFlagStatus(USART_TypeDef *pUSARTx, uint32_t FlagName)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	if(pUSARTx->USART_SR & FlagName)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <UART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <UART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <USART_SetBaudRate>:
	pUSARTx->USART_SR &= ~(0x1 << FlagName);
}


void USART_SetBaudRate(USART_TypeDef *pUSARTx, uint32_t BaudRate)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <USART_SetBaudRate+0xd8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d003      	beq.n	80012ca <USART_SetBaudRate+0x1e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <USART_SetBaudRate+0xdc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d103      	bne.n	80012d2 <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 80012ca:	f7ff fb19 	bl	8000900 <RCC_GetPCLK2Value>
 80012ce:	61f8      	str	r0, [r7, #28]
 80012d0:	e002      	b.n	80012d8 <USART_SetBaudRate+0x2c>
	}
	else
	{
		PCLKx = RCC_GetPCLK1Value();
 80012d2:	f7ff fabd 	bl	8000850 <RCC_GetPCLK1Value>
 80012d6:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->USART_CR1 & (1 << USART_CR1_OVER8))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	441a      	add	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	e00a      	b.n	8001312 <USART_SetBaudRate+0x66>
	}
	else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009a      	lsls	r2, r3, #2
 8001306:	441a      	add	r2, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <USART_SetBaudRate+0xe0>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2264      	movs	r2, #100	; 0x64
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->USART_CR1 & ( 1 << USART_CR1_OVER8))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	3332      	adds	r3, #50	; 0x32
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <USART_SetBaudRate+0xe0>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e009      	b.n	800136c <USART_SetBaudRate+0xc0>

	}
	else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	3332      	adds	r3, #50	; 0x32
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <USART_SetBaudRate+0xe0>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->USART_BRR = tempreg;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	609a      	str	r2, [r3, #8]
}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40011000 	.word	0x40011000
 8001388:	40011400 	.word	0x40011400
 800138c:	51eb851f 	.word	0x51eb851f

08001390 <Delay>:

char RxBuf[1024];
uint8_t Btn_Ctrl,RxCmlt;

void Delay(uint32_t cnt)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	for(uint32_t i =0; i<cnt; i++);
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e002      	b.n	80013a4 <Delay+0x14>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3f8      	bcc.n	800139e <Delay+0xe>
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
	...

080013b8 <USer_Button_Init>:


void USer_Button_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
	/*
	 * PA0 ---> WAKE-UP Button
	 */
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <USer_Button_Init+0x28>)
 80013c0:	607b      	str	r3, [r7, #4]

	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80013c2:	2304      	movs	r3, #4
 80013c4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72fb      	strb	r3, [r7, #11]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIOBtn);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fff9 	bl	80003c8 <GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020000 	.word	0x40020000

080013e4 <UART_Pin_Config>:

void UART_Pin_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
	 * PA2 (AF7) ---> USART2_TX
	 * PA3 (AF7) ---> USART2_RX
	 */
	GPIO_Handle_t UARTPin;

	UARTPin.pGPIOx = GPIOA;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <UART_Pin_Config+0x40>)
 80013ec:	607b      	str	r3, [r7, #4]

	UARTPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 80013ee:	2302      	movs	r3, #2
 80013f0:	727b      	strb	r3, [r7, #9]
	UARTPin.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	737b      	strb	r3, [r7, #13]
	UARTPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80013f6:	2300      	movs	r3, #0
 80013f8:	733b      	strb	r3, [r7, #12]
	UARTPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HIGH;
 80013fa:	2302      	movs	r3, #2
 80013fc:	72bb      	strb	r3, [r7, #10]
	UARTPin.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 80013fe:	2301      	movs	r3, #1
 8001400:	72fb      	strb	r3, [r7, #11]

	//USART2_TX Init
	UARTPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8001402:	2302      	movs	r3, #2
 8001404:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&UARTPin);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe ffdd 	bl	80003c8 <GPIO_Init>

	//USART2_RX Init;
	UARTPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800140e:	2303      	movs	r3, #3
 8001410:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&UARTPin);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ffd7 	bl	80003c8 <GPIO_Init>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000

08001428 <UART2_Init>:

void UART2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	 * Parity ------------> No Parity
	 * HW Flow Control ---> No HW Flow Control
	 * Word Length -------> 8
	 */

	UARTHandle.pUSARTx = USART2;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <UART2_Init+0x3c>)
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <UART2_Init+0x40>)
 8001430:	601a      	str	r2, [r3, #0]

	UARTHandle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <UART2_Init+0x3c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	609a      	str	r2, [r3, #8]
	UARTHandle.USART_Config.USART_Mode = USART_MODE_TXRX;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <UART2_Init+0x3c>)
 800143c:	2202      	movs	r2, #2
 800143e:	711a      	strb	r2, [r3, #4]
	UARTHandle.USART_Config.USART_NoOfStopBits = USART_NO_STOP_BIT_1;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <UART2_Init+0x3c>)
 8001442:	2200      	movs	r2, #0
 8001444:	731a      	strb	r2, [r3, #12]
	UARTHandle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <UART2_Init+0x3c>)
 8001448:	2200      	movs	r2, #0
 800144a:	739a      	strb	r2, [r3, #14]
	UARTHandle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <UART2_Init+0x3c>)
 800144e:	2200      	movs	r2, #0
 8001450:	73da      	strb	r2, [r3, #15]
	UARTHandle.USART_Config.USART_WordLength = USART_WORD_LEN_8;
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <UART2_Init+0x3c>)
 8001454:	2200      	movs	r2, #0
 8001456:	735a      	strb	r2, [r3, #13]

	UART_Init(&UARTHandle);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <UART2_Init+0x3c>)
 800145a:	f7ff fb7f 	bl	8000b5c <UART_Init>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000040 	.word	0x20000040
 8001468:	40004400 	.word	0x40004400

0800146c <main>:

int main(void)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
	uint8_t cnt;
	Btn_Ctrl = RESET;
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <main+0xc4>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	RxCmlt = RESET;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <main+0xc8>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	//Peripheral Initiation
	USer_Button_Init();
 800147e:	f7ff ff9b 	bl	80013b8 <USer_Button_Init>
	UART_Pin_Config();
 8001482:	f7ff ffaf 	bl	80013e4 <UART_Pin_Config>
	UART2_Init();
 8001486:	f7ff ffcf 	bl	8001428 <UART2_Init>

	//GPIO Button Interrupt Enable
	GPIO_IRQITConfig(EXTI0_IRQn, ENABLE);
 800148a:	2101      	movs	r1, #1
 800148c:	2006      	movs	r0, #6
 800148e:	f7ff f93b 	bl	8000708 <GPIO_IRQITConfig>

	//USART2 Interrupt Enable
	UART_IRQITConfig(USART2_IRQn, ENABLE);
 8001492:	2101      	movs	r1, #1
 8001494:	2026      	movs	r0, #38	; 0x26
 8001496:	f7ff fc7d 	bl	8000d94 <UART_IRQITConfig>

	//USART2 Peripheral Enable
	UART_PeripheralControl(USART2, ENABLE);
 800149a:	2101      	movs	r1, #1
 800149c:	4826      	ldr	r0, [pc, #152]	; (8001538 <main+0xcc>)
 800149e:	f7ff fed6 	bl	800124e <UART_PeripheralControl>

	while(1)
	{
		//Wait until button is pressed
		while(! Btn_Ctrl);
 80014a2:	bf00      	nop
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <main+0xc4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0fb      	beq.n	80014a4 <main+0x38>

		//Make sure cnt < 3
		cnt = cnt %3;
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <main+0xd0>)
 80014b0:	fba3 1302 	umull	r1, r3, r3, r2
 80014b4:	0859      	lsrs	r1, r3, #1
 80014b6:	460b      	mov	r3, r1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	440b      	add	r3, r1
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	71fb      	strb	r3, [r7, #7]

		//Reset RxBuf
		memset(RxBuf,0, sizeof(RxBuf));
 80014c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c4:	2100      	movs	r1, #0
 80014c6:	481e      	ldr	r0, [pc, #120]	; (8001540 <main+0xd4>)
 80014c8:	f000 f8bc 	bl	8001644 <memset>
		//Wait until USAR2 is ready
		while(USART_ReceiveDataIT(&UARTHandle, RxBuf,strlen(msg[cnt])) != USART_READY);
 80014cc:	bf00      	nop
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <main+0xd8>)
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe86 	bl	80001e8 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4917      	ldr	r1, [pc, #92]	; (8001540 <main+0xd4>)
 80014e2:	4819      	ldr	r0, [pc, #100]	; (8001548 <main+0xdc>)
 80014e4:	f7ff fc2d 	bl	8000d42 <USART_ReceiveDataIT>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <main+0x62>

		//Send Data
		USART_SendData(&UARTHandle, (uint8_t *)msg[cnt], strlen(msg[cnt]));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <main+0xd8>)
 80014f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <main+0xd8>)
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe72 	bl	80001e8 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4621      	mov	r1, r4
 800150a:	480f      	ldr	r0, [pc, #60]	; (8001548 <main+0xdc>)
 800150c:	f7ff fbcc 	bl	8000ca8 <USART_SendData>

		//Wait Until Receive Complete
		while(!RxCmlt);
 8001510:	bf00      	nop
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <main+0xc8>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0fb      	beq.n	8001512 <main+0xa6>

		RxCmlt = RESET;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <main+0xc8>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
		Btn_Ctrl = RESET;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <main+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
		cnt++;
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	3301      	adds	r3, #1
 800152a:	71fb      	strb	r3, [r7, #7]
		while(! Btn_Ctrl);
 800152c:	e7b9      	b.n	80014a2 <main+0x36>
 800152e:	bf00      	nop
 8001530:	20000065 	.word	0x20000065
 8001534:	20000064 	.word	0x20000064
 8001538:	40004400 	.word	0x40004400
 800153c:	aaaaaaab 	.word	0xaaaaaaab
 8001540:	20000068 	.word	0x20000068
 8001544:	20000018 	.word	0x20000018
 8001548:	20000040 	.word	0x20000040

0800154c <EXTI0_IRQHandler>:
	}
}


void EXTI0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	Delay(5000);
 8001550:	f241 3088 	movw	r0, #5000	; 0x1388
 8001554:	f7ff ff1c 	bl	8001390 <Delay>

	GPIO_IRQ_Handling(GPIO_PIN_NO_0);
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff f959 	bl	8000810 <GPIO_IRQ_Handling>

	Btn_Ctrl = SET;
 800155e:	4b02      	ldr	r3, [pc, #8]	; (8001568 <EXTI0_IRQHandler+0x1c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000065 	.word	0x20000065

0800156c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	UART_IRQ_Handling(&UARTHandle);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USART2_IRQHandler+0x10>)
 8001572:	f7ff fc93 	bl	8000e9c <UART_IRQ_Handling>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000040 	.word	0x20000040

08001580 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t AppEv)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
	if(AppEv == USART_EVENT_RX_CMPLT)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <USART_ApplicationEventCallback+0x18>
	{
		RxCmlt = SET;
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <USART_ApplicationEventCallback+0x24>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
	}
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000064 	.word	0x20000064

080015a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015d2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80015d6:	f000 f811 	bl	80015fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff ff47 	bl	800146c <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
  ldr   r0, =_estack
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80015ec:	080016a0 	.word	0x080016a0
  ldr r2, =_sbss
 80015f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80015f4:	20000468 	.word	0x20000468

080015f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <__libc_init_array>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	4e0d      	ldr	r6, [pc, #52]	; (8001634 <__libc_init_array+0x38>)
 8001600:	4c0d      	ldr	r4, [pc, #52]	; (8001638 <__libc_init_array+0x3c>)
 8001602:	1ba4      	subs	r4, r4, r6
 8001604:	10a4      	asrs	r4, r4, #2
 8001606:	2500      	movs	r5, #0
 8001608:	42a5      	cmp	r5, r4
 800160a:	d109      	bne.n	8001620 <__libc_init_array+0x24>
 800160c:	4e0b      	ldr	r6, [pc, #44]	; (800163c <__libc_init_array+0x40>)
 800160e:	4c0c      	ldr	r4, [pc, #48]	; (8001640 <__libc_init_array+0x44>)
 8001610:	f000 f820 	bl	8001654 <_init>
 8001614:	1ba4      	subs	r4, r4, r6
 8001616:	10a4      	asrs	r4, r4, #2
 8001618:	2500      	movs	r5, #0
 800161a:	42a5      	cmp	r5, r4
 800161c:	d105      	bne.n	800162a <__libc_init_array+0x2e>
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001624:	4798      	blx	r3
 8001626:	3501      	adds	r5, #1
 8001628:	e7ee      	b.n	8001608 <__libc_init_array+0xc>
 800162a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162e:	4798      	blx	r3
 8001630:	3501      	adds	r5, #1
 8001632:	e7f2      	b.n	800161a <__libc_init_array+0x1e>
 8001634:	08001698 	.word	0x08001698
 8001638:	08001698 	.word	0x08001698
 800163c:	08001698 	.word	0x08001698
 8001640:	0800169c 	.word	0x0800169c

08001644 <memset>:
 8001644:	4402      	add	r2, r0
 8001646:	4603      	mov	r3, r0
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <memset+0xa>
 800164c:	4770      	bx	lr
 800164e:	f803 1b01 	strb.w	r1, [r3], #1
 8001652:	e7f9      	b.n	8001648 <memset+0x4>

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
